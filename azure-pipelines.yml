variables:
  - group: global
  - group: NuGetOrg
  - name: solution
    value: "**/*.sln"
  - name: buildConfiguration
    value: 'Release'

trigger:
  tags:
    include:
      - '*'
  batch: 'true'
  branches:
    include:
      - main
      - features/*
  paths:
    exclude:
      - README.md

pr:
  autoCancel: 'true'
  branches:
    include:
      - main

resources:
  - repo: self
    fetchDepth: '0'

#######################################################################################################
# VERSION
#
stages:
  - stage: version
    displayName: Version stage
    jobs:
      - job: version
        displayName: Version
        variables:
          MinVerDefaultPreReleaseIdentifiers: preview.0
          # MinVerBuildMetadata: $(Build.SourceVersion) # use git commit hash in version
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            fetchDepth: '0'

          - task: UseDotNet@2
            displayName: Use .NET SDK
            condition: succeeded()
            inputs:
              version: '9.0.x'
              performMultiLevelLookup: true
              includePreviewVersions: false

          - bash: |
              export ASPNETCORE_ENVIRONMENT=Development
              whereis dotnet
              /usr/bin/dotnet --info
            displayName: Inspect environment
            condition: succeeded()

          - task: DotNetCoreCLI@2
            displayName: 'Install version tool'
            inputs:
              command: 'custom'
              custom: 'tool'
              arguments: 'install --global minver-cli --version 4.3.0'

          - powershell: |
              $version = $(minver -v d) # https://github.com/adamralph/minver#options
              $buildName = "$version" # + "_" + $env:BUILD_SOURCEBRANCHNAME
              Write-Host "##vso[build.updatebuildnumber]$buildName"
              Write-Host "##vso[task.setvariable variable=BUILD_VERSION;isOutput=true]$buildName"
            displayName: Calculate version
            name: CalculateVersion

          - powershell: |
              Get-ChildItem Env:
            displayName: Show environment variables

  #######################################################################################################
  # BUILD & PACKAGE
  #
  - stage: build
    displayName: Build & Package stage
    dependsOn: [ version ]
    jobs:
      - job: build
        displayName: Build & Package Templates
        pool:
          vmImage: 'ubuntu-latest'
        variables:
          NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
          BUILD_VERSION: $[ stageDependencies.version.version.outputs['CalculateVersion.BUILD_VERSION'] ]
        steps:
          - checkout: self
            fetchDepth: '0'

          - task: UseDotNet@2
            displayName: Use .NET SDK
            condition: succeeded()
            inputs:
              version: '9.0.x'
              performMultiLevelLookup: true
              includePreviewVersions: false

          - bash: |
              export ASPNETCORE_ENVIRONMENT=Development
              whereis dotnet
              /usr/bin/dotnet --info
            displayName: Inspect environment
            condition: succeeded()

          # Template validation - check if template.json files are valid
          - bash: |
              echo "Validating template configuration files..."
              find . -name "template.json" -type f | while read template; do
                echo "Validating: $template"
                if ! python3 -m json.tool "$template" > /dev/null; then
                  echo "Invalid JSON in template: $template"
                  exit 1
                fi
                echo "âœ“ Valid: $template"
              done
            displayName: Validate template configurations
            condition: succeeded()

          # Test template installation and creation
          - bash: |
              echo "Testing template installation..."
              dotnet new install .

              echo "Listing installed templates..."
              dotnet new list | grep -E "(devkitsolution|devkitmodule)" || echo "Templates not found in list"

              echo "Testing solution template creation..."
              mkdir -p test-output/test-solution
              cd test-output/test-solution
              dotnet new devkitsolution --SolutionName TestSolution --ModuleName TestCore

              echo "Testing module template creation..."
              mkdir -p ../module-test
              cd ../module-test
              dotnet new devkitmodule -n TestModule

              echo "Template tests completed successfully"
            displayName: Test template functionality
            condition: succeeded()

          # Template security validation
          - task: Bash@3
            displayName: Template security validation
            continueOnError: true
            inputs:
              targetType: 'inline'
              script: |
                echo "Performing template security validation..."
                # Check for sensitive information in templates
                if grep -r -i "password\|secret\|key\|token" . --include="*.cs" --include="*.json" --include="*.config" --exclude-dir=".git" --exclude="azure-pipelines.yml"; then
                  echo "Warning: Potential sensitive information found in templates"
                  # Set to continue for now, but review findings
                fi
                echo "Template security validation completed"

          # Clean up test directories before packaging
          - bash: |
              echo "Cleaning up test directories..."
              rm -rf test-output/
              echo "Test directories cleaned"
            displayName: Clean test directories
            condition: succeeded()

          # Update version in nuspec file
          - bash: |
              echo "Updating version in nuspec file..."
              echo "Original version:"
              grep "<version>" BridgingIT.DevKit.Templates.nuspec

              sed -i "s/<version>1\.0\.0<\/version>/<version>$(BUILD_VERSION)<\/version>/g" BridgingIT.DevKit.Templates.nuspec

              echo "Updated version:"
              grep "<version>" BridgingIT.DevKit.Templates.nuspec
            displayName: Update nuspec version
            condition: succeeded()

          # Create NuGet package using custom nuget pack command for .nuspec files
          - task: DotNetCoreCLI@2
            displayName: Package pack
            condition: |
              and
              (
                succeeded(),
                or
                (
                  eq(variables['Build.SourceBranch'], 'refs/heads/main'),
                  contains(variables['Build.SourceBranch'], 'refs/tags')
                )
              )
            inputs:
              command: 'pack'
              projects: 'BridgingIT.DevKit.Templates.nuspec'
              arguments: '--output "$(Build.ArtifactStagingDirectory)/packages" --configuration $(buildConfiguration) --verbosity Normal /p:NoWarn=NU5104'

          # Push to NuGet.org
          - task: DotNetCoreCLI@2
            displayName: Package push (nuget)
            condition: |
              and
              (
                succeeded(),
                or
                (
                  eq(variables['Build.SourceBranch'], 'refs/heads/main'),
                  contains(variables['Build.SourceBranch'], 'refs/tags')
                )
              )
            inputs:
              command: custom
              custom: nuget
              arguments: >
                push $(Build.ArtifactStagingDirectory)/packages/*.nupkg
                -s https://api.nuget.org/v3/index.json
                -k $(NugetOrgApiKey)
                --skip-duplicate

          # Publish artifacts
          - task: PublishPipelineArtifact@1
            displayName: Publish package artifacts
            condition: |
              and
              (
                succeeded(),
                or
                (
                  eq(variables['Build.SourceBranch'], 'refs/heads/main'),
                  contains(variables['Build.SourceBranch'], 'refs/tags')
                )
              )
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/packages"
              artifactName: packages

          # Clean up test installations
          - bash: |
              echo "Cleaning up template installations..."
              dotnet new uninstall BridgingIT.DevKit.Solution.Template || true
              dotnet new uninstall BridgingIT.DevKit.Module.Template || true
              dotnet new uninstall . || true
            displayName: Cleanup template installations
            condition: always()
            continueOnError: true